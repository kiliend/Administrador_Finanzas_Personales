/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JFrames;

import ClaseDAOImpl.ObjetivoDAOImpl;
import Clases.Objetivo;
import Clases.UsuarioSesion;
import ConexionBD.ConexionDB;
import java.sql.Connection;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Luan Condori
 */
public class MenuObjetivos extends javax.swing.JFrame {
    private static final Logger logger = Logger.getLogger(MenuObjetivos.class.getName());
    private ObjetivoDAOImpl objetivoDAO;
    private Connection conexion;
    /**
     * Creates new form MenuObjetivos
     */
    public MenuObjetivos() {
        initComponents();
        this.conexion = ConexionDB.getConexion(); // Obtén la conexión a la base de datos
        this.objetivoDAO = new ObjetivoDAOImpl(conexion); 
        cargarObjetivos(); // Cargar los objetivos cuando inicie el formulario
       
    }
private void cargarObjetivos() {
    int userId = UsuarioSesion.getUserId(); // Obtener el ID del usuario desde la sesión
    if (userId != 0) {
        // Realiza una consulta para cargar los objetivos del usuario
        List<Objetivo> objetivos = objetivoDAO.obtenerPorUsuario(userId);
        
        DefaultTableModel model = (DefaultTableModel) tblObjetivos.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de agregar los nuevos datos
        for (Objetivo objetivo : objetivos) {
            model.addRow(new Object[] { objetivo.getIdObjetivo(), objetivo.getDescripcion(), objetivo.getFechaInicio(), objetivo.getFechaFin(), objetivo.getCantidad() });
        }

        // Hacer la tabla editable
        tblObjetivos.setModel(model);
    } else {
        JOptionPane.showMessageDialog(this, "Usuario no registrado", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnIngresoPresupuesto = new javax.swing.JButton();
        btnGastoPresupuesto = new javax.swing.JButton();
        btnCerrarSesionPresupuesto = new javax.swing.JButton();
        btnReportePresupuesto = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnEditarPresupuesto = new javax.swing.JButton();
        btnEliminarPresupuesto = new javax.swing.JButton();
        btnAgregarPresupuesto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblObjetivos = new javax.swing.JTable();
        btnPresupuestos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));

        jPanel1.setBackground(new java.awt.Color(51, 204, 255));

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel1.setText("Administrador de Finanzas Personal");

        btnIngresoPresupuesto.setBackground(new java.awt.Color(102, 255, 255));
        btnIngresoPresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnIngresoPresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ingreso.png"))); // NOI18N
        btnIngresoPresupuesto.setText("Ingreso");
        btnIngresoPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresoPresupuestoActionPerformed(evt);
            }
        });

        btnGastoPresupuesto.setBackground(new java.awt.Color(102, 255, 255));
        btnGastoPresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnGastoPresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/depreciacion.png"))); // NOI18N
        btnGastoPresupuesto.setText("Gastos");
        btnGastoPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGastoPresupuestoActionPerformed(evt);
            }
        });

        btnCerrarSesionPresupuesto.setBackground(new java.awt.Color(0, 102, 204));
        btnCerrarSesionPresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnCerrarSesionPresupuesto.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrarSesionPresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrar-sesion.png"))); // NOI18N
        btnCerrarSesionPresupuesto.setText("Regresar");
        btnCerrarSesionPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionPresupuestoActionPerformed(evt);
            }
        });

        btnReportePresupuesto.setBackground(new java.awt.Color(102, 255, 255));
        btnReportePresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnReportePresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/informe.png"))); // NOI18N
        btnReportePresupuesto.setText("Reporte");
        btnReportePresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportePresupuestoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGastoPresupuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIngresoPresupuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReportePresupuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCerrarSesionPresupuesto)
                                .addGap(23, 23, 23)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addComponent(btnIngresoPresupuesto)
                .addGap(31, 31, 31)
                .addComponent(btnGastoPresupuesto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btnReportePresupuesto)
                .addGap(42, 42, 42)
                .addComponent(btnCerrarSesionPresupuesto)
                .addGap(61, 61, 61))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/objetivo1.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        jLabel3.setText("Menú Objetivo");

        btnEditarPresupuesto.setBackground(new java.awt.Color(153, 255, 153));
        btnEditarPresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnEditarPresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        btnEditarPresupuesto.setText("EDITAR");
        btnEditarPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarPresupuestoActionPerformed(evt);
            }
        });

        btnEliminarPresupuesto.setBackground(new java.awt.Color(102, 255, 204));
        btnEliminarPresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnEliminarPresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        btnEliminarPresupuesto.setText("ELIMINAR");
        btnEliminarPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPresupuestoActionPerformed(evt);
            }
        });

        btnAgregarPresupuesto.setBackground(new java.awt.Color(102, 255, 204));
        btnAgregarPresupuesto.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnAgregarPresupuesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar.png"))); // NOI18N
        btnAgregarPresupuesto.setText("AGREGAR");
        btnAgregarPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPresupuestoActionPerformed(evt);
            }
        });

        tblObjetivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Objetivo", "Descripción", "Fecha Inicio", "Fecha Fin", "Cantidad"
            }
        ));
        jScrollPane1.setViewportView(tblObjetivos);

        btnPresupuestos.setBackground(new java.awt.Color(255, 255, 0));
        btnPresupuestos.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnPresupuestos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/grafico-circular.png"))); // NOI18N
        btnPresupuestos.setText("Presupuesto");
        btnPresupuestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPresupuestosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btnPresupuestos)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarPresupuesto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(btnEliminarPresupuesto)
                        .addGap(29, 29, 29)
                        .addComponent(btnAgregarPresupuesto)
                        .addGap(46, 46, 46))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3)
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditarPresupuesto)
                            .addComponent(btnEliminarPresupuesto)
                            .addComponent(btnAgregarPresupuesto))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPresupuestos)
                        .addGap(129, 129, 129))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGastoPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGastoPresupuestoActionPerformed
      MenuGastos AbrirGastos = new MenuGastos();
     AbrirGastos.setVisible(true);
     this.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_btnGastoPresupuestoActionPerformed

    private void btnCerrarSesionPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionPresupuestoActionPerformed

        Menu IrMenu = new Menu();  //Se cambia el Menu

        // Hacer visible el formulario secundario
        IrMenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCerrarSesionPresupuestoActionPerformed

    private void btnAgregarPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPresupuestoActionPerformed
        Registro_Objetivo RegistroO = new Registro_Objetivo();

        // Hacer visible el formulario secundario
        RegistroO.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAgregarPresupuestoActionPerformed

    private void btnPresupuestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPresupuestosActionPerformed
EstablecerPresupuesto Presupuesto = new EstablecerPresupuesto  ();
Presupuesto.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_btnPresupuestosActionPerformed

    private void btnIngresoPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresoPresupuestoActionPerformed
     MenuRegistrarIngresos AbrirIngresos = new MenuRegistrarIngresos();
     AbrirIngresos.setVisible(true);
    this.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_btnIngresoPresupuestoActionPerformed

    private void btnEliminarPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPresupuestoActionPerformed
    int selectedRow = tblObjetivos.getSelectedRow();
    
    // Verificar si se seleccionó un objetivo
    if (selectedRow != -1) {
        int idObjetivo = (int) tblObjetivos.getValueAt(selectedRow, 0);
        Objetivo objetivo = objetivoDAO.obtenerPorId(idObjetivo); // Obtener el objetivo por su ID
        
        // Comprobar si el objetivo fue creado hoy
        LocalDate fechaHoy = LocalDate.now();
        if (objetivo.getFechaInicio().equals(fechaHoy)) {
            // Registro de intento de eliminación en los logs
            logger.info("Intentando eliminar el objetivo con ID " + idObjetivo + " creado hoy.");
            
            // Eliminar el objetivo
            objetivoDAO.eliminar(idObjetivo);
            
            // Recargar la tabla de objetivos después de eliminar
            cargarObjetivos(); 
            
            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Objetivo eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            
            // Registro de éxito de la eliminación en los logs
            logger.info("Objetivo con ID " + idObjetivo + " eliminado exitosamente.");
        } else {
            // Registro de intento de eliminación fallido (objetivo no creado hoy)
            logger.warning("El objetivo con ID " + idObjetivo + " no puede ser eliminado ya que no fue creado hoy.");
            JOptionPane.showMessageDialog(this, "No puedes eliminar objetivos de días pasados.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Registro de error si no se seleccionó ningún objetivo
        logger.warning("No se seleccionó ningún objetivo para eliminar.");
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un objetivo para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEliminarPresupuestoActionPerformed

    private void btnEditarPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarPresupuestoActionPerformed
   // Obtener la fila seleccionada en la tabla
    int selectedRow = tblObjetivos.getSelectedRow();
    
    // Si se ha seleccionado una fila
    if (selectedRow != -1) {
        // Obtener el ID del objetivo de la tabla
        int idObjetivo = (int) tblObjetivos.getValueAt(selectedRow, 0);
        
        // Obtener el objetivo desde la base de datos utilizando el ID
        Objetivo objetivo = objetivoDAO.obtenerPorId(idObjetivo);
        
        // Verificar si se encontró el objetivo
        if (objetivo != null) {
            // Mostrar ventana emergente para editar los datos del objetivo
            String descripcion = JOptionPane.showInputDialog(this, 
                "Ingrese la descripción:", objetivo.getDescripcion());
            String fechaInicioStr = JOptionPane.showInputDialog(this, 
                "Ingrese la fecha de inicio (yyyy-MM-dd):", objetivo.getFechaInicio().toString());
            String fechaFinStr = JOptionPane.showInputDialog(this, 
                "Ingrese la fecha de fin (yyyy-MM-dd):", objetivo.getFechaFin().toString());
            String cantidadStr = JOptionPane.showInputDialog(this, 
                "Ingrese la cantidad:", String.valueOf(objetivo.getCantidad()));
            
            // Verificar que los campos no estén vacíos
            if (descripcion != null && fechaInicioStr != null && fechaFinStr != null && cantidadStr != null) {
                try {
                    // Convertir las fechas de String a LocalDate
                    LocalDate fechaInicio = LocalDate.parse(fechaInicioStr);
                    LocalDate fechaFin = LocalDate.parse(fechaFinStr);
                    double cantidad = Double.parseDouble(cantidadStr);
                    
                    // Actualizar los datos del objetivo con los nuevos valores
                    objetivo.setDescripcion(descripcion);
                    objetivo.setFechaInicio(fechaInicio);
                    objetivo.setFechaFin(fechaFin);
                    objetivo.setCantidad(cantidad);
                    
                    // Registrar en los logs que se va a realizar una actualización
                    logger.info("Actualizando el objetivo con ID: " + objetivo.getIdObjetivo());
                    logger.info("Nuevos datos: descripcion=" + descripcion + 
                                ", fecha_inicio=" + fechaInicio + 
                                ", fecha_fin=" + fechaFin + 
                                ", cantidad=" + cantidad);
                    
                    // Llamar al método para actualizar el objetivo en la base de datos
                    objetivoDAO.actualizar(objetivo);
                    
                    // Recargar la tabla con los datos actualizados
                    cargarObjetivos();
                    
                    // Mostrar mensaje de éxito
                    JOptionPane.showMessageDialog(this, "Objetivo actualizado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    logger.info("Objetivo con ID " + objetivo.getIdObjetivo() + " actualizado exitosamente.");
                } catch (Exception e) {
                    // Registrar error en los logs si hay un problema con los datos
                    logger.log(Level.SEVERE, "Error al actualizar el objetivo con ID " + objetivo.getIdObjetivo(), e);
                    JOptionPane.showMessageDialog(this, 
                        "Error al actualizar los datos. Asegúrate de ingresar datos válidos.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Si el usuario cancela la edición o deja campos vacíos
                logger.warning("Campos vacíos detectados durante la edición del objetivo.");
                JOptionPane.showMessageDialog(this, "Los campos no pueden estar vacíos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si no se encontró el objetivo en la base de datos
            logger.warning("Objetivo con ID " + idObjetivo + " no encontrado.");
            JOptionPane.showMessageDialog(this, "Objetivo no encontrado en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Si no se seleccionó ningún objetivo en la tabla
        logger.warning("No se seleccionó ningún objetivo para editar.");
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un objetivo para editar.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarPresupuestoActionPerformed

    private void btnReportePresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportePresupuestoActionPerformed
    MenuReportes Reportes = new MenuReportes();
    Reportes.setVisible(true);// TODO add your handling code here:
    this.dispose();
    }//GEN-LAST:event_btnReportePresupuestoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuObjetivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuObjetivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuObjetivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuObjetivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuObjetivos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarPresupuesto;
    private javax.swing.JButton btnCerrarSesionPresupuesto;
    private javax.swing.JButton btnEditarPresupuesto;
    private javax.swing.JButton btnEliminarPresupuesto;
    private javax.swing.JButton btnGastoPresupuesto;
    private javax.swing.JButton btnIngresoPresupuesto;
    private javax.swing.JButton btnPresupuestos;
    private javax.swing.JButton btnReportePresupuesto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblObjetivos;
    // End of variables declaration//GEN-END:variables
}
